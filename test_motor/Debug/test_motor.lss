
test_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00000bca  00000c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800162  00800162  00000cc0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d66  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa3  00000000  00000000  00002c06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c4c  00000000  00000000  000036a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  000042f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000784  00000000  00000000  0000473c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011d3  00000000  00000000  00004ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00006093  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 42 03 	jmp	0x684	; 0x684 <__vector_1>
   8:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ec       	ldi	r30, 0xCA	; 202
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 36       	cpi	r26, 0x62	; 98
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e6       	ldi	r26, 0x62	; 98
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 37       	cpi	r26, 0x7D	; 125
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 09 03 	call	0x612	; 0x612 <main>
  9e:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_master_write>:
  }

  i2c_master_stop();

  return I2C_STATUS_SUCCESS;
}
  a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  aa:	84 e8       	ldi	r24, 0x84	; 132
  ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  b0:	ec eb       	ldi	r30, 0xBC	; 188
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	88 23       	and	r24, r24
  b8:	ec f7       	brge	.-6      	; 0xb4 <i2c_master_write+0xe>
  ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  be:	88 7f       	andi	r24, 0xF8	; 248
  c0:	88 32       	cpi	r24, 0x28	; 40
  c2:	11 f4       	brne	.+4      	; 0xc8 <i2c_master_write+0x22>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret
  c8:	85 e1       	ldi	r24, 0x15	; 21
  ca:	08 95       	ret

000000cc <i2c_master_start>:
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	10 82       	st	Z, r1
  d2:	94 ea       	ldi	r25, 0xA4	; 164
  d4:	90 83       	st	Z, r25
  d6:	90 81       	ld	r25, Z
  d8:	99 23       	and	r25, r25
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_master_start+0xa>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 30       	cpi	r25, 0x08	; 8
  e4:	11 f0       	breq	.+4      	; 0xea <i2c_master_start+0x1e>
  e6:	90 31       	cpi	r25, 0x10	; 16
  e8:	a9 f4       	brne	.+42     	; 0x114 <i2c_master_start+0x48>
  ea:	88 0f       	add	r24, r24
  ec:	68 2b       	or	r22, r24
  ee:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  f8:	ec eb       	ldi	r30, 0xBC	; 188
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	88 23       	and	r24, r24
 100:	ec f7       	brge	.-6      	; 0xfc <i2c_master_start+0x30>
 102:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 106:	88 7f       	andi	r24, 0xF8	; 248
 108:	88 31       	cpi	r24, 0x18	; 24
 10a:	31 f0       	breq	.+12     	; 0x118 <i2c_master_start+0x4c>
 10c:	80 34       	cpi	r24, 0x40	; 64
 10e:	31 f0       	breq	.+12     	; 0x11c <i2c_master_start+0x50>
 110:	84 e1       	ldi	r24, 0x14	; 20
 112:	08 95       	ret
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	08 95       	ret
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	08 95       	ret

00000120 <i2c_master_init>:
 120:	9b 01       	movw	r18, r22
 122:	ac 01       	movw	r20, r24
 124:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	74 e2       	ldi	r23, 0x24	; 36
 12c:	84 ef       	ldi	r24, 0xF4	; 244
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 80 04 	call	0x900	; 0x900 <__udivmodsi4>
 134:	da 01       	movw	r26, r20
 136:	c9 01       	movw	r24, r18
 138:	40 97       	sbiw	r24, 0x10	; 16
 13a:	a1 09       	sbc	r26, r1
 13c:	b1 09       	sbc	r27, r1
 13e:	b6 95       	lsr	r27
 140:	a7 95       	ror	r26
 142:	97 95       	ror	r25
 144:	87 95       	ror	r24
 146:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 14a:	08 95       	ret

0000014c <i2c_master_sendByte>:

uint8_t i2c_master_sendByte(uint8_t address, uint8_t data)
{
 14c:	cf 93       	push	r28
 14e:	c6 2f       	mov	r28, r22
  uint8_t status = i2c_master_start(address, I2C_WRITE);
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	0e 94 66 00 	call	0xcc	; 0xcc <i2c_master_start>
  if (status)
 156:	81 11       	cpse	r24, r1
 158:	08 c0       	rjmp	.+16     	; 0x16a <i2c_master_sendByte+0x1e>
    return status;

  status = i2c_master_write(data);
 15a:	8c 2f       	mov	r24, r28
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_master_write>
  if (status)
 160:	81 11       	cpse	r24, r1
 162:	03 c0       	rjmp	.+6      	; 0x16a <i2c_master_sendByte+0x1e>
  return I2C_STATUS_SUCCESS;
}

void i2c_master_stop(void)
{
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 164:	94 e9       	ldi	r25, 0x94	; 148
 166:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    return status;

  i2c_master_stop();

  return I2C_STATUS_SUCCESS;
};
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <lq_transmitI2C>:

    for (i = 0; i < 8; i++)
    {
        lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
    }
}
 16e:	fc 01       	movw	r30, r24
 170:	93 81       	ldd	r25, Z+3	; 0x03
 172:	69 2b       	or	r22, r25
 174:	80 81       	ld	r24, Z
 176:	0e 94 a6 00 	call	0x14c	; 0x14c <i2c_master_sendByte>
 17a:	08 95       	ret

0000017c <lq_turnOnBacklight>:
 17c:	28 e0       	ldi	r18, 0x08	; 8
 17e:	fc 01       	movw	r30, r24
 180:	23 83       	std	Z+3, r18	; 0x03
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	0e 94 b7 00 	call	0x16e	; 0x16e <lq_transmitI2C>
 188:	08 95       	ret

0000018a <lq_writeDevicePulse>:
 18a:	0f 93       	push	r16
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	8c 01       	movw	r16, r24
 192:	c6 2f       	mov	r28, r22
 194:	64 60       	ori	r22, 0x04	; 4
 196:	0e 94 b7 00 	call	0x16e	; 0x16e <lq_transmitI2C>
 19a:	8a e0       	ldi	r24, 0x0A	; 10
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <lq_writeDevicePulse+0x12>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <lq_writeDevicePulse+0x18>
 1a2:	6c 2f       	mov	r22, r28
 1a4:	6b 7f       	andi	r22, 0xFB	; 251
 1a6:	c8 01       	movw	r24, r16
 1a8:	0e 94 b7 00 	call	0x16e	; 0x16e <lq_transmitI2C>
 1ac:	87 ec       	ldi	r24, 0xC7	; 199
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lq_writeDevicePulse+0x26>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lq_writeDevicePulse+0x2c>
 1b6:	00 00       	nop
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <lq_writeDevice4Bits>:
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
 1c8:	16 2f       	mov	r17, r22
 1ca:	0e 94 b7 00 	call	0x16e	; 0x16e <lq_transmitI2C>
 1ce:	61 2f       	mov	r22, r17
 1d0:	ce 01       	movw	r24, r28
 1d2:	0e 94 c5 00 	call	0x18a	; 0x18a <lq_writeDevicePulse>
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	1f 91       	pop	r17
 1dc:	08 95       	ret

000001de <lq_writeDeviceByte>:
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	8c 01       	movw	r16, r24
 1e8:	c6 2f       	mov	r28, r22
 1ea:	d4 2f       	mov	r29, r20
 1ec:	96 2f       	mov	r25, r22
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	69 2f       	mov	r22, r25
 1f2:	64 2b       	or	r22, r20
 1f4:	c8 01       	movw	r24, r16
 1f6:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lq_writeDevice4Bits>
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	c8 9f       	mul	r28, r24
 1fe:	b0 01       	movw	r22, r0
 200:	11 24       	eor	r1, r1
 202:	6d 2b       	or	r22, r29
 204:	c8 01       	movw	r24, r16
 206:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lq_writeDevice4Bits>
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <lq_print>:
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	eb 01       	movw	r28, r22
 21e:	68 81       	ld	r22, Y
 220:	66 23       	and	r22, r22
 222:	49 f0       	breq	.+18     	; 0x236 <lq_print+0x22>
 224:	8c 01       	movw	r16, r24
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	c8 01       	movw	r24, r16
 22c:	0e 94 ef 00 	call	0x1de	; 0x1de <lq_writeDeviceByte>
 230:	69 91       	ld	r22, Y+
 232:	61 11       	cpse	r22, r1
 234:	f9 cf       	rjmp	.-14     	; 0x228 <lq_print+0x14>
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <lq_sendCommand>:
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	0e 94 ef 00 	call	0x1de	; 0x1de <lq_writeDeviceByte>
 246:	08 95       	ret

00000248 <lq_setCursor>:
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	00 d0       	rcall	.+0      	; 0x24e <lq_setCursor+0x6>
 24e:	00 d0       	rcall	.+0      	; 0x250 <lq_setCursor+0x8>
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
 254:	19 82       	std	Y+1, r1	; 0x01
 256:	20 e4       	ldi	r18, 0x40	; 64
 258:	2a 83       	std	Y+2, r18	; 0x02
 25a:	24 e1       	ldi	r18, 0x14	; 20
 25c:	2b 83       	std	Y+3, r18	; 0x03
 25e:	24 e5       	ldi	r18, 0x54	; 84
 260:	2c 83       	std	Y+4, r18	; 0x04
 262:	fe 01       	movw	r30, r28
 264:	e6 0f       	add	r30, r22
 266:	f1 1d       	adc	r31, r1
 268:	21 81       	ldd	r18, Z+1	; 0x01
 26a:	64 2f       	mov	r22, r20
 26c:	62 0f       	add	r22, r18
 26e:	60 68       	ori	r22, 0x80	; 128
 270:	0e 94 20 01 	call	0x240	; 0x240 <lq_sendCommand>
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <lq_clear>:
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	0e 94 20 01 	call	0x240	; 0x240 <lq_sendCommand>
 28e:	8f e3       	ldi	r24, 0x3F	; 63
 290:	9f e1       	ldi	r25, 0x1F	; 31
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <lq_clear+0x10>
 296:	00 c0       	rjmp	.+0      	; 0x298 <lq_clear+0x16>
 298:	00 00       	nop
 29a:	40 e0       	ldi	r20, 0x00	; 0
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	ce 01       	movw	r24, r28
 2a0:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <lq_returnHome>:
 2aa:	62 e0       	ldi	r22, 0x02	; 2
 2ac:	0e 94 20 01 	call	0x240	; 0x240 <lq_sendCommand>
 2b0:	8f e3       	ldi	r24, 0x3F	; 63
 2b2:	9f e1       	ldi	r25, 0x1F	; 31
 2b4:	01 97       	sbiw	r24, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lq_returnHome+0xa>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lq_returnHome+0x10>
 2ba:	00 00       	nop
 2bc:	08 95       	ret

000002be <lq_turnOnDisplay>:
 2be:	fc 01       	movw	r30, r24
 2c0:	65 81       	ldd	r22, Z+5	; 0x05
 2c2:	26 2f       	mov	r18, r22
 2c4:	24 60       	ori	r18, 0x04	; 4
 2c6:	25 83       	std	Z+5, r18	; 0x05
 2c8:	6c 60       	ori	r22, 0x0C	; 12
 2ca:	0e 94 20 01 	call	0x240	; 0x240 <lq_sendCommand>
 2ce:	08 95       	ret

000002d0 <lq_init>:

#include <avr/io.h>
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	2e 97       	sbiw	r28, 0x0e	; 14
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	f8 94       	cli
 2de:	de bf       	out	0x3e, r29	; 62
 2e0:	0f be       	out	0x3f, r0	; 63
 2e2:	cd bf       	out	0x3d, r28	; 61
    LiquidCrystalDevice_t device;

    device.Address = address;
 2e4:	88 87       	std	Y+8, r24	; 0x08
    device.Columns = columns;
 2e6:	69 87       	std	Y+9, r22	; 0x09
    device.Rows = rows;
 2e8:	4a 87       	std	Y+10, r20	; 0x0a
    device.Backlight = LCD_NOBACKLIGHT;
 2ea:	1b 86       	std	Y+11, r1	; 0x0b
    device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
 2ec:	2c 87       	std	Y+12, r18	; 0x0c
    device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 2ee:	84 e0       	ldi	r24, 0x04	; 4
 2f0:	8d 87       	std	Y+13, r24	; 0x0d

    // Initialize to default text direction (for roman languages)
    device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	8e 87       	std	Y+14, r24	; 0x0e

    if (rows > 1)
 2f6:	42 30       	cpi	r20, 0x02	; 2
 2f8:	18 f0       	brcs	.+6      	; 0x300 <lq_init+0x30>
    {
        device.DisplayFunction |= LCD_2LINE;
 2fa:	82 2f       	mov	r24, r18
 2fc:	88 60       	ori	r24, 0x08	; 8
 2fe:	8c 87       	std	Y+12, r24	; 0x0c
    }

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotSize != 0) && (rows == 1))
 300:	22 23       	and	r18, r18
 302:	29 f0       	breq	.+10     	; 0x30e <lq_init+0x3e>
 304:	41 30       	cpi	r20, 0x01	; 1
 306:	19 f4       	brne	.+6      	; 0x30e <lq_init+0x3e>
    {
        device.DisplayFunction |= LCD_5x10DOTS;
 308:	8c 85       	ldd	r24, Y+12	; 0x0c
 30a:	84 60       	ori	r24, 0x04	; 4
 30c:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	81 ee       	ldi	r24, 0xE1	; 225
 312:	94 e0       	ldi	r25, 0x04	; 4
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <lq_init+0x44>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <lq_init+0x4e>
 31e:	00 00       	nop
    // according to datasheet, we need at least 40ms after power rises above 2.7V
    // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
    _delay_ms(100);

    // Now we pull both RS and R/W low to begin commands
    lq_transmitI2C(&device, LCD_NOBACKLIGHT); // reset expanderand turn backlight off (Bit 8 =1)
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	ce 01       	movw	r24, r28
 324:	08 96       	adiw	r24, 0x08	; 8
 326:	0e 94 b7 00 	call	0x16e	; 0x16e <lq_transmitI2C>
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	83 ed       	ldi	r24, 0xD3	; 211
 32e:	90 e3       	ldi	r25, 0x30	; 48
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <lq_init+0x60>
 338:	00 c0       	rjmp	.+0      	; 0x33a <lq_init+0x6a>
 33a:	00 00       	nop
    // put the LCD into 4 bit mode
    //  this is according to the hitachi HD44780 datasheet
    //  figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    lq_transmitI2C(&device, 0x03 << 4);
 33c:	60 e3       	ldi	r22, 0x30	; 48
 33e:	ce 01       	movw	r24, r28
 340:	08 96       	adiw	r24, 0x08	; 8
 342:	0e 94 b7 00 	call	0x16e	; 0x16e <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 346:	8f e4       	ldi	r24, 0x4F	; 79
 348:	96 e4       	ldi	r25, 0x46	; 70
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <lq_init+0x7a>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <lq_init+0x80>
 350:	00 00       	nop
    _delay_us(4500); // wait min 4.1ms

    // second try
    lq_writeDevice4Bits(&device, 0x03 << 4);
 352:	60 e3       	ldi	r22, 0x30	; 48
 354:	ce 01       	movw	r24, r28
 356:	08 96       	adiw	r24, 0x08	; 8
 358:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lq_writeDevice4Bits>
 35c:	8f e4       	ldi	r24, 0x4F	; 79
 35e:	96 e4       	ldi	r25, 0x46	; 70
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <lq_init+0x90>
 364:	00 c0       	rjmp	.+0      	; 0x366 <lq_init+0x96>
 366:	00 00       	nop
    _delay_us(4500); // wait min 4.1ms

    // third go!
    lq_writeDevice4Bits(&device, 0x03 << 4);
 368:	60 e3       	ldi	r22, 0x30	; 48
 36a:	ce 01       	movw	r24, r28
 36c:	08 96       	adiw	r24, 0x08	; 8
 36e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lq_writeDevice4Bits>
 372:	87 e5       	ldi	r24, 0x57	; 87
 374:	92 e0       	ldi	r25, 0x02	; 2
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <lq_init+0xa6>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <lq_init+0xac>
 37c:	00 00       	nop
    _delay_us(150); // wait min 150 mics

    // finally, set to 4-bit interface
    lq_writeDevice4Bits(&device, 0x02 << 4);
 37e:	60 e2       	ldi	r22, 0x20	; 32
 380:	ce 01       	movw	r24, r28
 382:	08 96       	adiw	r24, 0x08	; 8
 384:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lq_writeDevice4Bits>

    // set # lines, font size, etc.
    lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
 388:	6c 85       	ldd	r22, Y+12	; 0x0c
 38a:	60 62       	ori	r22, 0x20	; 32
 38c:	ce 01       	movw	r24, r28
 38e:	08 96       	adiw	r24, 0x08	; 8
 390:	0e 94 20 01 	call	0x240	; 0x240 <lq_sendCommand>

    // turn the display on with no cursor or blinking default
    lq_turnOnDisplay(&device);
 394:	ce 01       	movw	r24, r28
 396:	08 96       	adiw	r24, 0x08	; 8
 398:	0e 94 5f 01 	call	0x2be	; 0x2be <lq_turnOnDisplay>

    // clear it off
    lq_clear(&device);
 39c:	ce 01       	movw	r24, r28
 39e:	08 96       	adiw	r24, 0x08	; 8
 3a0:	0e 94 41 01 	call	0x282	; 0x282 <lq_clear>

    // set the entry mode
    lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
 3a4:	6e 85       	ldd	r22, Y+14	; 0x0e
 3a6:	64 60       	ori	r22, 0x04	; 4
 3a8:	ce 01       	movw	r24, r28
 3aa:	08 96       	adiw	r24, 0x08	; 8
 3ac:	0e 94 20 01 	call	0x240	; 0x240 <lq_sendCommand>

    lq_returnHome(&device);
 3b0:	ce 01       	movw	r24, r28
 3b2:	08 96       	adiw	r24, 0x08	; 8
 3b4:	0e 94 55 01 	call	0x2aa	; 0x2aa <lq_returnHome>

    return device;
 3b8:	87 e0       	ldi	r24, 0x07	; 7
 3ba:	fe 01       	movw	r30, r28
 3bc:	38 96       	adiw	r30, 0x08	; 8
 3be:	de 01       	movw	r26, r28
 3c0:	11 96       	adiw	r26, 0x01	; 1
 3c2:	01 90       	ld	r0, Z+
 3c4:	0d 92       	st	X+, r0
 3c6:	8a 95       	dec	r24
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <lq_init+0xf2>
 3ca:	29 81       	ldd	r18, Y+1	; 0x01
 3cc:	3a 81       	ldd	r19, Y+2	; 0x02
 3ce:	4b 81       	ldd	r20, Y+3	; 0x03
 3d0:	5c 81       	ldd	r21, Y+4	; 0x04
 3d2:	6d 81       	ldd	r22, Y+5	; 0x05
 3d4:	7e 81       	ldd	r23, Y+6	; 0x06
};
 3d6:	8f 81       	ldd	r24, Y+7	; 0x07
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	2e 96       	adiw	r28, 0x0e	; 14
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <intToString>:

char *text = NULL;

// Function convert int to string
char *intToString(int16_t num)
{
 3ec:	8f 92       	push	r8
 3ee:	9f 92       	push	r9
 3f0:	af 92       	push	r10
 3f2:	bf 92       	push	r11
 3f4:	cf 92       	push	r12
 3f6:	df 92       	push	r13
 3f8:	ef 92       	push	r14
 3fa:	ff 92       	push	r15
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	8c 01       	movw	r16, r24
	int temp = num;
	int digitCount = 0;
 406:	c0 e0       	ldi	r28, 0x00	; 0
 408:	d0 e0       	ldi	r29, 0x00	; 0

	do
	{
		temp /= 10;
 40a:	2a e0       	ldi	r18, 0x0A	; 10
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	01 c0       	rjmp	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		digitCount++;
 410:	e7 01       	movw	r28, r14
	int temp = num;
	int digitCount = 0;

	do
	{
		temp /= 10;
 412:	b9 01       	movw	r22, r18
 414:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__divmodhi4>
 418:	cb 01       	movw	r24, r22
		digitCount++;
 41a:	7e 01       	movw	r14, r28
 41c:	4f ef       	ldi	r20, 0xFF	; 255
 41e:	e4 1a       	sub	r14, r20
 420:	f4 0a       	sbc	r15, r20
	} while (temp != 0);
 422:	00 97       	sbiw	r24, 0x00	; 0
 424:	a9 f7       	brne	.-22     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 426:	5e 01       	movw	r10, r28

	// Define signed number
	int sign = (num < 0) ? -1 : 1;
 428:	11 23       	and	r17, r17
 42a:	d4 f5       	brge	.+116    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 42c:	2d c0       	rjmp	.+90     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	{
		result[0] = '-';
	}

	// Convert integer to string
	for (int i = digitCount - 1; i >= 0; i--)
 42e:	bb 20       	and	r11, r11
 430:	1c f1       	brlt	.+70     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
	{
		result[sign == -1 ? i + 1 : i] = abs(num % 10) + '0';
 432:	0f 2e       	mov	r0, r31
 434:	fa e0       	ldi	r31, 0x0A	; 10
 436:	af 2e       	mov	r10, r31
 438:	b1 2c       	mov	r11, r1
 43a:	f0 2d       	mov	r31, r0
 43c:	8f ef       	ldi	r24, 0xFF	; 255
 43e:	88 16       	cp	r8, r24
 440:	98 06       	cpc	r9, r24
 442:	19 f4       	brne	.+6      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 444:	fe 01       	movw	r30, r28
 446:	31 96       	adiw	r30, 0x01	; 1
 448:	01 c0       	rjmp	.+2      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 44a:	fe 01       	movw	r30, r28
 44c:	ec 0d       	add	r30, r12
 44e:	fd 1d       	adc	r31, r13
 450:	c8 01       	movw	r24, r16
 452:	b5 01       	movw	r22, r10
 454:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__divmodhi4>
 458:	9c 01       	movw	r18, r24
 45a:	99 23       	and	r25, r25
 45c:	24 f4       	brge	.+8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 45e:	22 27       	eor	r18, r18
 460:	33 27       	eor	r19, r19
 462:	28 1b       	sub	r18, r24
 464:	39 0b       	sbc	r19, r25
 466:	20 5d       	subi	r18, 0xD0	; 208
 468:	20 83       	st	Z, r18
		num /= 10;
 46a:	c8 01       	movw	r24, r16
 46c:	b5 01       	movw	r22, r10
 46e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__divmodhi4>
 472:	8b 01       	movw	r16, r22
	{
		result[0] = '-';
	}

	// Convert integer to string
	for (int i = digitCount - 1; i >= 0; i--)
 474:	21 97       	sbiw	r28, 0x01	; 1
 476:	10 f7       	brcc	.-60     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
		result[sign == -1 ? i + 1 : i] = abs(num % 10) + '0';
		num /= 10;
	}

	// End string
	result[digitCount + (sign == -1 ? 1 : 0)] = '\0';
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	89 20       	and	r8, r9
 47e:	80 94       	com	r8
 480:	c1 f0       	breq	.+48     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	15 c0       	rjmp	.+42     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>

	// Define signed number
	int sign = (num < 0) ? -1 : 1;

	// Allocate memory
	char *result = (char *)malloc(digitCount + 2); // 1 cho mỗi chữ số và 1 cho dấu
 488:	ce 01       	movw	r24, r28
 48a:	03 96       	adiw	r24, 0x03	; 3
 48c:	0e 94 b6 04 	call	0x96c	; 0x96c <malloc>
 490:	6c 01       	movw	r12, r24

	// Process signed number
	if (sign == -1)
	{
		result[0] = '-';
 492:	8d e2       	ldi	r24, 0x2D	; 45
 494:	f6 01       	movw	r30, r12
 496:	80 83       	st	Z, r24
		temp /= 10;
		digitCount++;
	} while (temp != 0);

	// Define signed number
	int sign = (num < 0) ? -1 : 1;
 498:	88 24       	eor	r8, r8
 49a:	8a 94       	dec	r8
 49c:	98 2c       	mov	r9, r8
 49e:	c7 cf       	rjmp	.-114    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>

	// Allocate memory
	char *result = (char *)malloc(digitCount + 2); // 1 cho mỗi chữ số và 1 cho dấu
 4a0:	ce 01       	movw	r24, r28
 4a2:	03 96       	adiw	r24, 0x03	; 3
 4a4:	0e 94 b6 04 	call	0x96c	; 0x96c <malloc>
 4a8:	6c 01       	movw	r12, r24
		temp /= 10;
		digitCount++;
	} while (temp != 0);

	// Define signed number
	int sign = (num < 0) ? -1 : 1;
 4aa:	88 24       	eor	r8, r8
 4ac:	83 94       	inc	r8
 4ae:	91 2c       	mov	r9, r1
 4b0:	be cf       	rjmp	.-132    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		result[sign == -1 ? i + 1 : i] = abs(num % 10) + '0';
		num /= 10;
	}

	// End string
	result[digitCount + (sign == -1 ? 1 : 0)] = '\0';
 4b2:	ec 0c       	add	r14, r12
 4b4:	fd 1c       	adc	r15, r13
 4b6:	f7 01       	movw	r30, r14
 4b8:	e8 0f       	add	r30, r24
 4ba:	f9 1f       	adc	r31, r25
 4bc:	10 82       	st	Z, r1

	return result;
}
 4be:	c6 01       	movw	r24, r12
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	df 90       	pop	r13
 4ce:	cf 90       	pop	r12
 4d0:	bf 90       	pop	r11
 4d2:	af 90       	pop	r10
 4d4:	9f 90       	pop	r9
 4d6:	8f 90       	pop	r8
 4d8:	08 95       	ret

000004da <motor_speed_PID>:

void motor_speed_PID(int32_t desired_speed)
{
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28

	rSpeed = i16_pulse - i16_pre_Pulse; // caculate speed
 4e4:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <i16_pulse>
 4e8:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <i16_pulse+0x1>
 4ec:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <i16_pre_Pulse>
 4f0:	50 91 67 01 	lds	r21, 0x0167	; 0x800167 <i16_pre_Pulse+0x1>
 4f4:	24 1b       	sub	r18, r20
 4f6:	35 0b       	sbc	r19, r21
 4f8:	30 93 71 01 	sts	0x0171, r19	; 0x800171 <rSpeed+0x1>
 4fc:	20 93 70 01 	sts	0x0170, r18	; 0x800170 <rSpeed>
	i16_pre_Pulse = i16_pulse;			// save Pulse value
 500:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <i16_pulse>
 504:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <i16_pulse+0x1>
 508:	30 93 67 01 	sts	0x0167, r19	; 0x800167 <i16_pre_Pulse+0x1>
 50c:	20 93 66 01 	sts	0x0166, r18	; 0x800166 <i16_pre_Pulse>
	Err = desired_speed - abs(rSpeed);	// caculate error
 510:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <rSpeed>
 514:	30 91 71 01 	lds	r19, 0x0171	; 0x800171 <rSpeed+0x1>
 518:	33 23       	and	r19, r19
 51a:	1c f4       	brge	.+6      	; 0x522 <motor_speed_PID+0x48>
 51c:	31 95       	neg	r19
 51e:	21 95       	neg	r18
 520:	31 09       	sbc	r19, r1
 522:	62 1b       	sub	r22, r18
 524:	73 0b       	sbc	r23, r19
 526:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <Err+0x1>
 52a:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <Err>

	// PID's components
	int16_t pPart = Kp * Err;
 52e:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <Kp>
 532:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <Err>
 536:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <Err+0x1>
	int16_t dPart = Kd * (Err - pre_Err) * INV_SAMPLING_TIME;
 53a:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <Kd>
 53e:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <Err>
 542:	f0 91 6f 01 	lds	r31, 0x016F	; 0x80016f <Err+0x1>
 546:	00 91 6c 01 	lds	r16, 0x016C	; 0x80016c <pre_Err>
 54a:	10 91 6d 01 	lds	r17, 0x016D	; 0x80016d <pre_Err+0x1>
	int16_t iPart = Ki * SAMPLING_TIME * Err / 1000;
 54e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <Ki>
 552:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <Err>
 556:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <Err+0x1>
	out_put_pulse += pPart + iPart + dPart;
 55a:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <out_put_pulse>
 55e:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <out_put_pulse+0x1>
	rSpeed = i16_pulse - i16_pre_Pulse; // caculate speed
	i16_pre_Pulse = i16_pulse;			// save Pulse value
	Err = desired_speed - abs(rSpeed);	// caculate error

	// PID's components
	int16_t pPart = Kp * Err;
 562:	58 9f       	mul	r21, r24
 564:	70 01       	movw	r14, r0
 566:	59 9f       	mul	r21, r25
 568:	f0 0c       	add	r15, r0
 56a:	11 24       	eor	r1, r1
	int16_t dPart = Kd * (Err - pre_Err) * INV_SAMPLING_TIME;
	int16_t iPart = Ki * SAMPLING_TIME * Err / 1000;
 56c:	8f e0       	ldi	r24, 0x0F	; 15
 56e:	48 9f       	mul	r20, r24
 570:	a0 01       	movw	r20, r0
 572:	11 24       	eor	r1, r1
 574:	46 9f       	mul	r20, r22
 576:	c0 01       	movw	r24, r0
 578:	47 9f       	mul	r20, r23
 57a:	90 0d       	add	r25, r0
 57c:	56 9f       	mul	r21, r22
 57e:	90 0d       	add	r25, r0
 580:	11 24       	eor	r1, r1
 582:	68 ee       	ldi	r22, 0xE8	; 232
 584:	73 e0       	ldi	r23, 0x03	; 3
 586:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <__divmodhi4>
	out_put_pulse += pPart + iPart + dPart;
 58a:	6e 0d       	add	r22, r14
 58c:	7f 1d       	adc	r23, r15
	i16_pre_Pulse = i16_pulse;			// save Pulse value
	Err = desired_speed - abs(rSpeed);	// caculate error

	// PID's components
	int16_t pPart = Kp * Err;
	int16_t dPart = Kd * (Err - pre_Err) * INV_SAMPLING_TIME;
 58e:	e0 1b       	sub	r30, r16
 590:	f1 0b       	sbc	r31, r17
 592:	ce 9f       	mul	r28, r30
 594:	a0 01       	movw	r20, r0
 596:	cf 9f       	mul	r28, r31
 598:	50 0d       	add	r21, r0
 59a:	11 24       	eor	r1, r1
 59c:	e3 e4       	ldi	r30, 0x43	; 67
 59e:	e4 9f       	mul	r30, r20
 5a0:	c0 01       	movw	r24, r0
 5a2:	e5 9f       	mul	r30, r21
 5a4:	90 0d       	add	r25, r0
 5a6:	11 24       	eor	r1, r1
	int16_t iPart = Ki * SAMPLING_TIME * Err / 1000;
	out_put_pulse += pPart + iPart + dPart;
 5a8:	68 0f       	add	r22, r24
 5aa:	79 1f       	adc	r23, r25
 5ac:	26 0f       	add	r18, r22
 5ae:	37 1f       	adc	r19, r23
 5b0:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <out_put_pulse+0x1>
 5b4:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <out_put_pulse>

	// Reconfigure when output get saturation
	if (out_put_pulse >= PWM_PERIOD)
 5b8:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <out_put_pulse>
 5bc:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <out_put_pulse+0x1>
 5c0:	80 38       	cpi	r24, 0x80	; 128
 5c2:	9e 43       	sbci	r25, 0x3E	; 62
 5c4:	34 f0       	brlt	.+12     	; 0x5d2 <motor_speed_PID+0xf8>
	{
		out_put_pulse = PWM_PERIOD - 1;
 5c6:	8f e7       	ldi	r24, 0x7F	; 127
 5c8:	9e e3       	ldi	r25, 0x3E	; 62
 5ca:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <out_put_pulse+0x1>
 5ce:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <out_put_pulse>
	}
	if (out_put_pulse <= 0)
 5d2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <out_put_pulse>
 5d6:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <out_put_pulse+0x1>
 5da:	18 16       	cp	r1, r24
 5dc:	19 06       	cpc	r1, r25
 5de:	34 f0       	brlt	.+12     	; 0x5ec <motor_speed_PID+0x112>
	{
		out_put_pulse = 1;
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <out_put_pulse+0x1>
 5e8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <out_put_pulse>
	}
	OCR0A = out_put_pulse; // get duty for OCR0A: update PWM
 5ec:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <out_put_pulse>
 5f0:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <out_put_pulse+0x1>
 5f4:	87 bd       	out	0x27, r24	; 39
	pre_Err = Err;		   // save Error value
 5f6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <Err>
 5fa:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <Err+0x1>
 5fe:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <pre_Err+0x1>
 602:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <pre_Err>
}
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	08 95       	ret

00000612 <main>:

LiquidCrystalDevice_t device;
int main(void)
{
	// Motor
	DDRD = (1 << EN) | (1 << IN1) | (1 << IN2);
 612:	80 ee       	ldi	r24, 0xE0	; 224
 614:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;
 616:	14 b8       	out	0x04, r1	; 4

	PORTD = (1 << 2) | (1 << 3);
 618:	8c e0       	ldi	r24, 0x0C	; 12
 61a:	8b b9       	out	0x0b, r24	; 11
	EICRA = 0x0A; // make INT0 and INT1 falling edge triggered
 61c:	8a e0       	ldi	r24, 0x0A	; 10
 61e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>

	// Use Timer2 for timer 25ms, sampling time
	TCCR2B = (1 << CS02) | (1 << CS00); // CS02=1, CS01=0, CS00=1: Prescaler 1024
 622:	85 e0       	ldi	r24, 0x05	; 5
 624:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TCNT2 = 21;							// set init value for T/C2 to get 15 ms (f=16MHz)
 628:	85 e1       	ldi	r24, 0x15	; 21
 62a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TIMSK2 = (1 << TOIE2);				// alow interrupt when over flow T/C0
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

	// Use Timer0 for generate PWM
	TCCR0A |= (1 << WGM01) | (1 << WGM00) | (1 << COM0A1);
 634:	84 b5       	in	r24, 0x24	; 36
 636:	83 68       	ori	r24, 0x83	; 131
 638:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);
 63a:	85 b5       	in	r24, 0x25	; 37
 63c:	85 60       	ori	r24, 0x05	; 5
 63e:	85 bd       	out	0x25, r24	; 37

	EIMSK = (1 << INT0) | (1 << INT1); // enable external interrupt 0
 640:	83 e0       	ldi	r24, 0x03	; 3
 642:	8d bb       	out	0x1d, r24	; 29
	sei();							   // enable interrupts
 644:	78 94       	sei

	// I2C LCD
	i2c_master_init(I2C_SCL_FREQUENCY_100);
 646:	60 ea       	ldi	r22, 0xA0	; 160
 648:	76 e8       	ldi	r23, 0x86	; 134
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 90 00 	call	0x120	; 0x120 <i2c_master_init>

	device = lq_init(0x27, 16, 2, 0);
 652:	20 e0       	ldi	r18, 0x00	; 0
 654:	42 e0       	ldi	r20, 0x02	; 2
 656:	60 e1       	ldi	r22, 0x10	; 16
 658:	87 e2       	ldi	r24, 0x27	; 39
 65a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <lq_init>
 65e:	20 93 72 01 	sts	0x0172, r18	; 0x800172 <device>
 662:	30 93 73 01 	sts	0x0173, r19	; 0x800173 <device+0x1>
 666:	40 93 74 01 	sts	0x0174, r20	; 0x800174 <device+0x2>
 66a:	50 93 75 01 	sts	0x0175, r21	; 0x800175 <device+0x3>
 66e:	60 93 76 01 	sts	0x0176, r22	; 0x800176 <device+0x4>
 672:	70 93 77 01 	sts	0x0177, r23	; 0x800177 <device+0x5>
 676:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <device+0x6>
	lq_turnOnBacklight(&device);
 67a:	82 e7       	ldi	r24, 0x72	; 114
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	0e 94 be 00 	call	0x17c	; 0x17c <lq_turnOnBacklight>

	while (1)
	{
	};
 682:	ff cf       	rjmp	.-2      	; 0x682 <main+0x70>

00000684 <__vector_1>:
}

ISR(INT0_vect) // ISR for external interrupt 0
{
 684:	1f 92       	push	r1
 686:	0f 92       	push	r0
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	0f 92       	push	r0
 68c:	11 24       	eor	r1, r1
 68e:	8f 93       	push	r24
 690:	9f 93       	push	r25
	if (bit_is_set(PINB, 0) != 0)
 692:	18 9b       	sbis	0x03, 0	; 3
 694:	0a c0       	rjmp	.+20     	; 0x6aa <__vector_1+0x26>
	{
		i16_pulse++;
 696:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <i16_pulse>
 69a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <i16_pulse+0x1>
 69e:	01 96       	adiw	r24, 0x01	; 1
 6a0:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <i16_pulse+0x1>
 6a4:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <i16_pulse>
 6a8:	09 c0       	rjmp	.+18     	; 0x6bc <__vector_1+0x38>
	}
	else
	{
		i16_pulse--;
 6aa:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <i16_pulse>
 6ae:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <i16_pulse+0x1>
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <i16_pulse+0x1>
 6b8:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <i16_pulse>
	}
}
 6bc:	9f 91       	pop	r25
 6be:	8f 91       	pop	r24
 6c0:	0f 90       	pop	r0
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	0f 90       	pop	r0
 6c6:	1f 90       	pop	r1
 6c8:	18 95       	reti

000006ca <__vector_2>:

ISR(INT1_vect) // ISR for external interrupt 1
{
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	2f 93       	push	r18
 6d6:	3f 93       	push	r19
 6d8:	4f 93       	push	r20
 6da:	5f 93       	push	r21
 6dc:	6f 93       	push	r22
 6de:	7f 93       	push	r23
 6e0:	8f 93       	push	r24
 6e2:	9f 93       	push	r25
 6e4:	af 93       	push	r26
 6e6:	bf 93       	push	r27
 6e8:	ef 93       	push	r30
 6ea:	ff 93       	push	r31

	flag++;
 6ec:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <flag>
 6f0:	8f 5f       	subi	r24, 0xFF	; 255
 6f2:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <flag>
	if (flag % 2 != 0)
 6f6:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <flag>
 6fa:	80 ff       	sbrs	r24, 0
 6fc:	33 c0       	rjmp	.+102    	; 0x764 <__vector_2+0x9a>
	{
		PORTD |= (1 << IN1);
 6fe:	5d 9a       	sbi	0x0b, 5	; 11
		motor_speed_PID(100);
 700:	64 e6       	ldi	r22, 0x64	; 100
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 6d 02 	call	0x4da	; 0x4da <motor_speed_PID>

		lq_clear(&device);
 70c:	82 e7       	ldi	r24, 0x72	; 114
 70e:	91 e0       	ldi	r25, 0x01	; 1
 710:	0e 94 41 01 	call	0x282	; 0x282 <lq_clear>
		lq_setCursor(&device, 1, 0);
 714:	40 e0       	ldi	r20, 0x00	; 0
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	82 e7       	ldi	r24, 0x72	; 114
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
		lq_print(&device, "Run_DC");
 720:	6a e0       	ldi	r22, 0x0A	; 10
 722:	71 e0       	ldi	r23, 0x01	; 1
 724:	82 e7       	ldi	r24, 0x72	; 114
 726:	91 e0       	ldi	r25, 0x01	; 1
 728:	0e 94 0a 01 	call	0x214	; 0x214 <lq_print>

		if (bit_is_set(PINB, 0) != 0)
 72c:	18 9b       	sbis	0x03, 0	; 3
 72e:	0d c0       	rjmp	.+26     	; 0x74a <__vector_2+0x80>
		{
			lq_setCursor(&device, 0, 0);
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	82 e7       	ldi	r24, 0x72	; 114
 736:	91 e0       	ldi	r25, 0x01	; 1
 738:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
			lq_print(&device, "quay_nghich");
 73c:	61 e1       	ldi	r22, 0x11	; 17
 73e:	71 e0       	ldi	r23, 0x01	; 1
 740:	82 e7       	ldi	r24, 0x72	; 114
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	0e 94 0a 01 	call	0x214	; 0x214 <lq_print>
 748:	26 c0       	rjmp	.+76     	; 0x796 <__vector_2+0xcc>
		}
		else
		{
			lq_setCursor(&device, 0, 0);
 74a:	40 e0       	ldi	r20, 0x00	; 0
 74c:	60 e0       	ldi	r22, 0x00	; 0
 74e:	82 e7       	ldi	r24, 0x72	; 114
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
			lq_print(&device, "quay_thuan");
 756:	6d e1       	ldi	r22, 0x1D	; 29
 758:	71 e0       	ldi	r23, 0x01	; 1
 75a:	82 e7       	ldi	r24, 0x72	; 114
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	0e 94 0a 01 	call	0x214	; 0x214 <lq_print>
 762:	19 c0       	rjmp	.+50     	; 0x796 <__vector_2+0xcc>
		}
	}
	else
	{
		PORTD &= ~(1 << IN1);
 764:	5d 98       	cbi	0x0b, 5	; 11
		text = "Pause_DC";
 766:	88 e2       	ldi	r24, 0x28	; 40
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
 76e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
		lq_clear(&device);
 772:	82 e7       	ldi	r24, 0x72	; 114
 774:	91 e0       	ldi	r25, 0x01	; 1
 776:	0e 94 41 01 	call	0x282	; 0x282 <lq_clear>
		lq_setCursor(&device, 0, 0);
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	82 e7       	ldi	r24, 0x72	; 114
 780:	91 e0       	ldi	r25, 0x01	; 1
 782:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
		lq_print(&device, text);
 786:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <__data_end>
 78a:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <__data_end+0x1>
 78e:	82 e7       	ldi	r24, 0x72	; 114
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	0e 94 0a 01 	call	0x214	; 0x214 <lq_print>
	}
}
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	7f 91       	pop	r23
 7a4:	6f 91       	pop	r22
 7a6:	5f 91       	pop	r21
 7a8:	4f 91       	pop	r20
 7aa:	3f 91       	pop	r19
 7ac:	2f 91       	pop	r18
 7ae:	0f 90       	pop	r0
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	0f 90       	pop	r0
 7b4:	1f 90       	pop	r1
 7b6:	18 95       	reti

000007b8 <__vector_9>:

ISR(TIMER2_OVF_vect) // update sampling time
{
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	2f 93       	push	r18
 7c4:	3f 93       	push	r19
 7c6:	4f 93       	push	r20
 7c8:	5f 93       	push	r21
 7ca:	6f 93       	push	r22
 7cc:	7f 93       	push	r23
 7ce:	8f 93       	push	r24
 7d0:	9f 93       	push	r25
 7d2:	af 93       	push	r26
 7d4:	bf 93       	push	r27
 7d6:	ef 93       	push	r30
 7d8:	ff 93       	push	r31
	sample_counter++;
 7da:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sample_counter>
 7de:	8f 5f       	subi	r24, 0xFF	; 255
 7e0:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <sample_counter>
	if (bit_is_set(PINB, 1) == 0)
 7e4:	19 99       	sbic	0x03, 1	; 3
 7e6:	0f c0       	rjmp	.+30     	; 0x806 <__vector_9+0x4e>
	{
		lq_setCursor(&device, 1, 0);
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	61 e0       	ldi	r22, 0x01	; 1
 7ec:	82 e7       	ldi	r24, 0x72	; 114
 7ee:	91 e0       	ldi	r25, 0x01	; 1
 7f0:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
		Ctrl_speed = 100;
 7f4:	84 e6       	ldi	r24, 0x64	; 100
 7f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Ctrl_speed>
		lq_print(&device, "PB1_is_pressed");
 7fa:	61 e3       	ldi	r22, 0x31	; 49
 7fc:	71 e0       	ldi	r23, 0x01	; 1
 7fe:	82 e7       	ldi	r24, 0x72	; 114
 800:	91 e0       	ldi	r25, 0x01	; 1
 802:	0e 94 0a 01 	call	0x214	; 0x214 <lq_print>
	}

	if (sample_counter == 80) // sample every 1200ms
 806:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <sample_counter>
 80a:	80 35       	cpi	r24, 0x50	; 80
 80c:	09 f0       	breq	.+2      	; 0x810 <__vector_9+0x58>
 80e:	46 c0       	rjmp	.+140    	; 0x89c <__vector_9+0xe4>
	{
		if (flag % 2 == 1)
 810:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <flag>
 814:	80 ff       	sbrs	r24, 0
 816:	40 c0       	rjmp	.+128    	; 0x898 <__vector_9+0xe0>
		{
			lq_clear(&device);
 818:	82 e7       	ldi	r24, 0x72	; 114
 81a:	91 e0       	ldi	r25, 0x01	; 1
 81c:	0e 94 41 01 	call	0x282	; 0x282 <lq_clear>
			lq_setCursor(&device, 0, 0);
 820:	40 e0       	ldi	r20, 0x00	; 0
 822:	60 e0       	ldi	r22, 0x00	; 0
 824:	82 e7       	ldi	r24, 0x72	; 114
 826:	91 e0       	ldi	r25, 0x01	; 1
 828:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
			lq_print(&device, "act_speed:");
 82c:	60 e4       	ldi	r22, 0x40	; 64
 82e:	71 e0       	ldi	r23, 0x01	; 1
 830:	82 e7       	ldi	r24, 0x72	; 114
 832:	91 e0       	ldi	r25, 0x01	; 1
 834:	0e 94 0a 01 	call	0x214	; 0x214 <lq_print>
			lq_setCursor(&device, 0, 11);
 838:	4b e0       	ldi	r20, 0x0B	; 11
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	82 e7       	ldi	r24, 0x72	; 114
 83e:	91 e0       	ldi	r25, 0x01	; 1
 840:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
			text = intToString(out_put_pulse);
 844:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <out_put_pulse>
 848:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <out_put_pulse+0x1>
 84c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <intToString>
 850:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x1>
 854:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end>
			lq_print(&device, text);
 858:	bc 01       	movw	r22, r24
 85a:	82 e7       	ldi	r24, 0x72	; 114
 85c:	91 e0       	ldi	r25, 0x01	; 1
 85e:	0e 94 0a 01 	call	0x214	; 0x214 <lq_print>
			if (bit_is_set(PINB, 0) != 0)
 862:	18 9b       	sbis	0x03, 0	; 3
 864:	0d c0       	rjmp	.+26     	; 0x880 <__vector_9+0xc8>
			{
				lq_setCursor(&device, 1, 0);
 866:	40 e0       	ldi	r20, 0x00	; 0
 868:	61 e0       	ldi	r22, 0x01	; 1
 86a:	82 e7       	ldi	r24, 0x72	; 114
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
				lq_print(&device, "quay nghich");
 872:	6b e4       	ldi	r22, 0x4B	; 75
 874:	71 e0       	ldi	r23, 0x01	; 1
 876:	82 e7       	ldi	r24, 0x72	; 114
 878:	91 e0       	ldi	r25, 0x01	; 1
 87a:	0e 94 0a 01 	call	0x214	; 0x214 <lq_print>
 87e:	0c c0       	rjmp	.+24     	; 0x898 <__vector_9+0xe0>
			}
			else
			{
				lq_setCursor(&device, 1, 0);
 880:	40 e0       	ldi	r20, 0x00	; 0
 882:	61 e0       	ldi	r22, 0x01	; 1
 884:	82 e7       	ldi	r24, 0x72	; 114
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	0e 94 24 01 	call	0x248	; 0x248 <lq_setCursor>
				lq_print(&device, "quay thuan");
 88c:	67 e5       	ldi	r22, 0x57	; 87
 88e:	71 e0       	ldi	r23, 0x01	; 1
 890:	82 e7       	ldi	r24, 0x72	; 114
 892:	91 e0       	ldi	r25, 0x01	; 1
 894:	0e 94 0a 01 	call	0x214	; 0x214 <lq_print>
			}
		}

		// reset sample counter
		sample_counter = 0;
 898:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <sample_counter>
	}

	TCNT2 = 21; // set init value for T/C2
 89c:	85 e1       	ldi	r24, 0x15	; 21
 89e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	if (flag % 2 != 0)
 8a2:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <flag>
 8a6:	80 ff       	sbrs	r24, 0
 8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <__vector_9+0xfe>
		motor_speed_PID(200);
 8aa:	68 ec       	ldi	r22, 0xC8	; 200
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	0e 94 6d 02 	call	0x4da	; 0x4da <motor_speed_PID>
 8b6:	ff 91       	pop	r31
 8b8:	ef 91       	pop	r30
 8ba:	bf 91       	pop	r27
 8bc:	af 91       	pop	r26
 8be:	9f 91       	pop	r25
 8c0:	8f 91       	pop	r24
 8c2:	7f 91       	pop	r23
 8c4:	6f 91       	pop	r22
 8c6:	5f 91       	pop	r21
 8c8:	4f 91       	pop	r20
 8ca:	3f 91       	pop	r19
 8cc:	2f 91       	pop	r18
 8ce:	0f 90       	pop	r0
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	0f 90       	pop	r0
 8d4:	1f 90       	pop	r1
 8d6:	18 95       	reti

000008d8 <__divmodhi4>:
 8d8:	97 fb       	bst	r25, 7
 8da:	07 2e       	mov	r0, r23
 8dc:	16 f4       	brtc	.+4      	; 0x8e2 <__divmodhi4+0xa>
 8de:	00 94       	com	r0
 8e0:	07 d0       	rcall	.+14     	; 0x8f0 <__divmodhi4_neg1>
 8e2:	77 fd       	sbrc	r23, 7
 8e4:	09 d0       	rcall	.+18     	; 0x8f8 <__divmodhi4_neg2>
 8e6:	0e 94 a2 04 	call	0x944	; 0x944 <__udivmodhi4>
 8ea:	07 fc       	sbrc	r0, 7
 8ec:	05 d0       	rcall	.+10     	; 0x8f8 <__divmodhi4_neg2>
 8ee:	3e f4       	brtc	.+14     	; 0x8fe <__divmodhi4_exit>

000008f0 <__divmodhi4_neg1>:
 8f0:	90 95       	com	r25
 8f2:	81 95       	neg	r24
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	08 95       	ret

000008f8 <__divmodhi4_neg2>:
 8f8:	70 95       	com	r23
 8fa:	61 95       	neg	r22
 8fc:	7f 4f       	sbci	r23, 0xFF	; 255

000008fe <__divmodhi4_exit>:
 8fe:	08 95       	ret

00000900 <__udivmodsi4>:
 900:	a1 e2       	ldi	r26, 0x21	; 33
 902:	1a 2e       	mov	r1, r26
 904:	aa 1b       	sub	r26, r26
 906:	bb 1b       	sub	r27, r27
 908:	fd 01       	movw	r30, r26
 90a:	0d c0       	rjmp	.+26     	; 0x926 <__udivmodsi4_ep>

0000090c <__udivmodsi4_loop>:
 90c:	aa 1f       	adc	r26, r26
 90e:	bb 1f       	adc	r27, r27
 910:	ee 1f       	adc	r30, r30
 912:	ff 1f       	adc	r31, r31
 914:	a2 17       	cp	r26, r18
 916:	b3 07       	cpc	r27, r19
 918:	e4 07       	cpc	r30, r20
 91a:	f5 07       	cpc	r31, r21
 91c:	20 f0       	brcs	.+8      	; 0x926 <__udivmodsi4_ep>
 91e:	a2 1b       	sub	r26, r18
 920:	b3 0b       	sbc	r27, r19
 922:	e4 0b       	sbc	r30, r20
 924:	f5 0b       	sbc	r31, r21

00000926 <__udivmodsi4_ep>:
 926:	66 1f       	adc	r22, r22
 928:	77 1f       	adc	r23, r23
 92a:	88 1f       	adc	r24, r24
 92c:	99 1f       	adc	r25, r25
 92e:	1a 94       	dec	r1
 930:	69 f7       	brne	.-38     	; 0x90c <__udivmodsi4_loop>
 932:	60 95       	com	r22
 934:	70 95       	com	r23
 936:	80 95       	com	r24
 938:	90 95       	com	r25
 93a:	9b 01       	movw	r18, r22
 93c:	ac 01       	movw	r20, r24
 93e:	bd 01       	movw	r22, r26
 940:	cf 01       	movw	r24, r30
 942:	08 95       	ret

00000944 <__udivmodhi4>:
 944:	aa 1b       	sub	r26, r26
 946:	bb 1b       	sub	r27, r27
 948:	51 e1       	ldi	r21, 0x11	; 17
 94a:	07 c0       	rjmp	.+14     	; 0x95a <__udivmodhi4_ep>

0000094c <__udivmodhi4_loop>:
 94c:	aa 1f       	adc	r26, r26
 94e:	bb 1f       	adc	r27, r27
 950:	a6 17       	cp	r26, r22
 952:	b7 07       	cpc	r27, r23
 954:	10 f0       	brcs	.+4      	; 0x95a <__udivmodhi4_ep>
 956:	a6 1b       	sub	r26, r22
 958:	b7 0b       	sbc	r27, r23

0000095a <__udivmodhi4_ep>:
 95a:	88 1f       	adc	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	5a 95       	dec	r21
 960:	a9 f7       	brne	.-22     	; 0x94c <__udivmodhi4_loop>
 962:	80 95       	com	r24
 964:	90 95       	com	r25
 966:	bc 01       	movw	r22, r24
 968:	cd 01       	movw	r24, r26
 96a:	08 95       	ret

0000096c <malloc>:
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	82 30       	cpi	r24, 0x02	; 2
 972:	91 05       	cpc	r25, r1
 974:	10 f4       	brcc	.+4      	; 0x97a <malloc+0xe>
 976:	82 e0       	ldi	r24, 0x02	; 2
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	e0 91 7b 01 	lds	r30, 0x017B	; 0x80017b <__flp>
 97e:	f0 91 7c 01 	lds	r31, 0x017C	; 0x80017c <__flp+0x1>
 982:	20 e0       	ldi	r18, 0x00	; 0
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	c0 e0       	ldi	r28, 0x00	; 0
 988:	d0 e0       	ldi	r29, 0x00	; 0
 98a:	30 97       	sbiw	r30, 0x00	; 0
 98c:	11 f1       	breq	.+68     	; 0x9d2 <malloc+0x66>
 98e:	40 81       	ld	r20, Z
 990:	51 81       	ldd	r21, Z+1	; 0x01
 992:	48 17       	cp	r20, r24
 994:	59 07       	cpc	r21, r25
 996:	c0 f0       	brcs	.+48     	; 0x9c8 <malloc+0x5c>
 998:	48 17       	cp	r20, r24
 99a:	59 07       	cpc	r21, r25
 99c:	61 f4       	brne	.+24     	; 0x9b6 <malloc+0x4a>
 99e:	82 81       	ldd	r24, Z+2	; 0x02
 9a0:	93 81       	ldd	r25, Z+3	; 0x03
 9a2:	20 97       	sbiw	r28, 0x00	; 0
 9a4:	19 f0       	breq	.+6      	; 0x9ac <malloc+0x40>
 9a6:	9b 83       	std	Y+3, r25	; 0x03
 9a8:	8a 83       	std	Y+2, r24	; 0x02
 9aa:	2b c0       	rjmp	.+86     	; 0xa02 <malloc+0x96>
 9ac:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <__flp+0x1>
 9b0:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <__flp>
 9b4:	26 c0       	rjmp	.+76     	; 0xa02 <malloc+0x96>
 9b6:	21 15       	cp	r18, r1
 9b8:	31 05       	cpc	r19, r1
 9ba:	19 f0       	breq	.+6      	; 0x9c2 <malloc+0x56>
 9bc:	42 17       	cp	r20, r18
 9be:	53 07       	cpc	r21, r19
 9c0:	18 f4       	brcc	.+6      	; 0x9c8 <malloc+0x5c>
 9c2:	9a 01       	movw	r18, r20
 9c4:	be 01       	movw	r22, r28
 9c6:	df 01       	movw	r26, r30
 9c8:	ef 01       	movw	r28, r30
 9ca:	02 80       	ldd	r0, Z+2	; 0x02
 9cc:	f3 81       	ldd	r31, Z+3	; 0x03
 9ce:	e0 2d       	mov	r30, r0
 9d0:	dc cf       	rjmp	.-72     	; 0x98a <malloc+0x1e>
 9d2:	21 15       	cp	r18, r1
 9d4:	31 05       	cpc	r19, r1
 9d6:	09 f1       	breq	.+66     	; 0xa1a <malloc+0xae>
 9d8:	28 1b       	sub	r18, r24
 9da:	39 0b       	sbc	r19, r25
 9dc:	24 30       	cpi	r18, 0x04	; 4
 9de:	31 05       	cpc	r19, r1
 9e0:	90 f4       	brcc	.+36     	; 0xa06 <malloc+0x9a>
 9e2:	12 96       	adiw	r26, 0x02	; 2
 9e4:	8d 91       	ld	r24, X+
 9e6:	9c 91       	ld	r25, X
 9e8:	13 97       	sbiw	r26, 0x03	; 3
 9ea:	61 15       	cp	r22, r1
 9ec:	71 05       	cpc	r23, r1
 9ee:	21 f0       	breq	.+8      	; 0x9f8 <malloc+0x8c>
 9f0:	fb 01       	movw	r30, r22
 9f2:	93 83       	std	Z+3, r25	; 0x03
 9f4:	82 83       	std	Z+2, r24	; 0x02
 9f6:	04 c0       	rjmp	.+8      	; 0xa00 <malloc+0x94>
 9f8:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <__flp+0x1>
 9fc:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <__flp>
 a00:	fd 01       	movw	r30, r26
 a02:	32 96       	adiw	r30, 0x02	; 2
 a04:	44 c0       	rjmp	.+136    	; 0xa8e <malloc+0x122>
 a06:	fd 01       	movw	r30, r26
 a08:	e2 0f       	add	r30, r18
 a0a:	f3 1f       	adc	r31, r19
 a0c:	81 93       	st	Z+, r24
 a0e:	91 93       	st	Z+, r25
 a10:	22 50       	subi	r18, 0x02	; 2
 a12:	31 09       	sbc	r19, r1
 a14:	2d 93       	st	X+, r18
 a16:	3c 93       	st	X, r19
 a18:	3a c0       	rjmp	.+116    	; 0xa8e <malloc+0x122>
 a1a:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <__brkval>
 a1e:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <__brkval+0x1>
 a22:	23 2b       	or	r18, r19
 a24:	41 f4       	brne	.+16     	; 0xa36 <malloc+0xca>
 a26:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a2a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a2e:	30 93 7a 01 	sts	0x017A, r19	; 0x80017a <__brkval+0x1>
 a32:	20 93 79 01 	sts	0x0179, r18	; 0x800179 <__brkval>
 a36:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 a3a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 a3e:	21 15       	cp	r18, r1
 a40:	31 05       	cpc	r19, r1
 a42:	41 f4       	brne	.+16     	; 0xa54 <malloc+0xe8>
 a44:	2d b7       	in	r18, 0x3d	; 61
 a46:	3e b7       	in	r19, 0x3e	; 62
 a48:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a4c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 a50:	24 1b       	sub	r18, r20
 a52:	35 0b       	sbc	r19, r21
 a54:	e0 91 79 01 	lds	r30, 0x0179	; 0x800179 <__brkval>
 a58:	f0 91 7a 01 	lds	r31, 0x017A	; 0x80017a <__brkval+0x1>
 a5c:	e2 17       	cp	r30, r18
 a5e:	f3 07       	cpc	r31, r19
 a60:	a0 f4       	brcc	.+40     	; 0xa8a <malloc+0x11e>
 a62:	2e 1b       	sub	r18, r30
 a64:	3f 0b       	sbc	r19, r31
 a66:	28 17       	cp	r18, r24
 a68:	39 07       	cpc	r19, r25
 a6a:	78 f0       	brcs	.+30     	; 0xa8a <malloc+0x11e>
 a6c:	ac 01       	movw	r20, r24
 a6e:	4e 5f       	subi	r20, 0xFE	; 254
 a70:	5f 4f       	sbci	r21, 0xFF	; 255
 a72:	24 17       	cp	r18, r20
 a74:	35 07       	cpc	r19, r21
 a76:	48 f0       	brcs	.+18     	; 0xa8a <malloc+0x11e>
 a78:	4e 0f       	add	r20, r30
 a7a:	5f 1f       	adc	r21, r31
 a7c:	50 93 7a 01 	sts	0x017A, r21	; 0x80017a <__brkval+0x1>
 a80:	40 93 79 01 	sts	0x0179, r20	; 0x800179 <__brkval>
 a84:	81 93       	st	Z+, r24
 a86:	91 93       	st	Z+, r25
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <malloc+0x122>
 a8a:	e0 e0       	ldi	r30, 0x00	; 0
 a8c:	f0 e0       	ldi	r31, 0x00	; 0
 a8e:	cf 01       	movw	r24, r30
 a90:	df 91       	pop	r29
 a92:	cf 91       	pop	r28
 a94:	08 95       	ret

00000a96 <free>:
 a96:	0f 93       	push	r16
 a98:	1f 93       	push	r17
 a9a:	cf 93       	push	r28
 a9c:	df 93       	push	r29
 a9e:	00 97       	sbiw	r24, 0x00	; 0
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <free+0xe>
 aa2:	8c c0       	rjmp	.+280    	; 0xbbc <free+0x126>
 aa4:	fc 01       	movw	r30, r24
 aa6:	32 97       	sbiw	r30, 0x02	; 2
 aa8:	13 82       	std	Z+3, r1	; 0x03
 aaa:	12 82       	std	Z+2, r1	; 0x02
 aac:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <__flp>
 ab0:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <__flp+0x1>
 ab4:	01 15       	cp	r16, r1
 ab6:	11 05       	cpc	r17, r1
 ab8:	81 f4       	brne	.+32     	; 0xada <free+0x44>
 aba:	20 81       	ld	r18, Z
 abc:	31 81       	ldd	r19, Z+1	; 0x01
 abe:	82 0f       	add	r24, r18
 ac0:	93 1f       	adc	r25, r19
 ac2:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <__brkval>
 ac6:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <__brkval+0x1>
 aca:	28 17       	cp	r18, r24
 acc:	39 07       	cpc	r19, r25
 ace:	79 f5       	brne	.+94     	; 0xb2e <free+0x98>
 ad0:	f0 93 7a 01 	sts	0x017A, r31	; 0x80017a <__brkval+0x1>
 ad4:	e0 93 79 01 	sts	0x0179, r30	; 0x800179 <__brkval>
 ad8:	71 c0       	rjmp	.+226    	; 0xbbc <free+0x126>
 ada:	d8 01       	movw	r26, r16
 adc:	40 e0       	ldi	r20, 0x00	; 0
 ade:	50 e0       	ldi	r21, 0x00	; 0
 ae0:	ae 17       	cp	r26, r30
 ae2:	bf 07       	cpc	r27, r31
 ae4:	50 f4       	brcc	.+20     	; 0xafa <free+0x64>
 ae6:	12 96       	adiw	r26, 0x02	; 2
 ae8:	2d 91       	ld	r18, X+
 aea:	3c 91       	ld	r19, X
 aec:	13 97       	sbiw	r26, 0x03	; 3
 aee:	ad 01       	movw	r20, r26
 af0:	21 15       	cp	r18, r1
 af2:	31 05       	cpc	r19, r1
 af4:	09 f1       	breq	.+66     	; 0xb38 <free+0xa2>
 af6:	d9 01       	movw	r26, r18
 af8:	f3 cf       	rjmp	.-26     	; 0xae0 <free+0x4a>
 afa:	9d 01       	movw	r18, r26
 afc:	da 01       	movw	r26, r20
 afe:	33 83       	std	Z+3, r19	; 0x03
 b00:	22 83       	std	Z+2, r18	; 0x02
 b02:	60 81       	ld	r22, Z
 b04:	71 81       	ldd	r23, Z+1	; 0x01
 b06:	86 0f       	add	r24, r22
 b08:	97 1f       	adc	r25, r23
 b0a:	82 17       	cp	r24, r18
 b0c:	93 07       	cpc	r25, r19
 b0e:	69 f4       	brne	.+26     	; 0xb2a <free+0x94>
 b10:	ec 01       	movw	r28, r24
 b12:	28 81       	ld	r18, Y
 b14:	39 81       	ldd	r19, Y+1	; 0x01
 b16:	26 0f       	add	r18, r22
 b18:	37 1f       	adc	r19, r23
 b1a:	2e 5f       	subi	r18, 0xFE	; 254
 b1c:	3f 4f       	sbci	r19, 0xFF	; 255
 b1e:	31 83       	std	Z+1, r19	; 0x01
 b20:	20 83       	st	Z, r18
 b22:	8a 81       	ldd	r24, Y+2	; 0x02
 b24:	9b 81       	ldd	r25, Y+3	; 0x03
 b26:	93 83       	std	Z+3, r25	; 0x03
 b28:	82 83       	std	Z+2, r24	; 0x02
 b2a:	45 2b       	or	r20, r21
 b2c:	29 f4       	brne	.+10     	; 0xb38 <free+0xa2>
 b2e:	f0 93 7c 01 	sts	0x017C, r31	; 0x80017c <__flp+0x1>
 b32:	e0 93 7b 01 	sts	0x017B, r30	; 0x80017b <__flp>
 b36:	42 c0       	rjmp	.+132    	; 0xbbc <free+0x126>
 b38:	13 96       	adiw	r26, 0x03	; 3
 b3a:	fc 93       	st	X, r31
 b3c:	ee 93       	st	-X, r30
 b3e:	12 97       	sbiw	r26, 0x02	; 2
 b40:	ed 01       	movw	r28, r26
 b42:	49 91       	ld	r20, Y+
 b44:	59 91       	ld	r21, Y+
 b46:	9e 01       	movw	r18, r28
 b48:	24 0f       	add	r18, r20
 b4a:	35 1f       	adc	r19, r21
 b4c:	e2 17       	cp	r30, r18
 b4e:	f3 07       	cpc	r31, r19
 b50:	71 f4       	brne	.+28     	; 0xb6e <free+0xd8>
 b52:	80 81       	ld	r24, Z
 b54:	91 81       	ldd	r25, Z+1	; 0x01
 b56:	84 0f       	add	r24, r20
 b58:	95 1f       	adc	r25, r21
 b5a:	02 96       	adiw	r24, 0x02	; 2
 b5c:	11 96       	adiw	r26, 0x01	; 1
 b5e:	9c 93       	st	X, r25
 b60:	8e 93       	st	-X, r24
 b62:	82 81       	ldd	r24, Z+2	; 0x02
 b64:	93 81       	ldd	r25, Z+3	; 0x03
 b66:	13 96       	adiw	r26, 0x03	; 3
 b68:	9c 93       	st	X, r25
 b6a:	8e 93       	st	-X, r24
 b6c:	12 97       	sbiw	r26, 0x02	; 2
 b6e:	e0 e0       	ldi	r30, 0x00	; 0
 b70:	f0 e0       	ldi	r31, 0x00	; 0
 b72:	d8 01       	movw	r26, r16
 b74:	12 96       	adiw	r26, 0x02	; 2
 b76:	8d 91       	ld	r24, X+
 b78:	9c 91       	ld	r25, X
 b7a:	13 97       	sbiw	r26, 0x03	; 3
 b7c:	00 97       	sbiw	r24, 0x00	; 0
 b7e:	19 f0       	breq	.+6      	; 0xb86 <free+0xf0>
 b80:	f8 01       	movw	r30, r16
 b82:	8c 01       	movw	r16, r24
 b84:	f6 cf       	rjmp	.-20     	; 0xb72 <free+0xdc>
 b86:	8d 91       	ld	r24, X+
 b88:	9c 91       	ld	r25, X
 b8a:	98 01       	movw	r18, r16
 b8c:	2e 5f       	subi	r18, 0xFE	; 254
 b8e:	3f 4f       	sbci	r19, 0xFF	; 255
 b90:	82 0f       	add	r24, r18
 b92:	93 1f       	adc	r25, r19
 b94:	20 91 79 01 	lds	r18, 0x0179	; 0x800179 <__brkval>
 b98:	30 91 7a 01 	lds	r19, 0x017A	; 0x80017a <__brkval+0x1>
 b9c:	28 17       	cp	r18, r24
 b9e:	39 07       	cpc	r19, r25
 ba0:	69 f4       	brne	.+26     	; 0xbbc <free+0x126>
 ba2:	30 97       	sbiw	r30, 0x00	; 0
 ba4:	29 f4       	brne	.+10     	; 0xbb0 <free+0x11a>
 ba6:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <__flp+0x1>
 baa:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <__flp>
 bae:	02 c0       	rjmp	.+4      	; 0xbb4 <free+0x11e>
 bb0:	13 82       	std	Z+3, r1	; 0x03
 bb2:	12 82       	std	Z+2, r1	; 0x02
 bb4:	10 93 7a 01 	sts	0x017A, r17	; 0x80017a <__brkval+0x1>
 bb8:	00 93 79 01 	sts	0x0179, r16	; 0x800179 <__brkval>
 bbc:	df 91       	pop	r29
 bbe:	cf 91       	pop	r28
 bc0:	1f 91       	pop	r17
 bc2:	0f 91       	pop	r16
 bc4:	08 95       	ret

00000bc6 <_exit>:
 bc6:	f8 94       	cli

00000bc8 <__stop_program>:
 bc8:	ff cf       	rjmp	.-2      	; 0xbc8 <__stop_program>
